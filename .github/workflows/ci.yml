name: CI pipeline

on:
  pull_request:
    branches:
      - main
    types: [reopened, synchronize, opened]
  push:
    branches:
      - main

jobs:
  backend_pipeline:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Create .env file
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
        echo "FIREBASE_KEY_PATH=/app/keys/firebaseKey.json" >> .env
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
        echo "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}" >> .env
        echo "QUERY_EMBEDDING_MODEL=${{ secrets.QUERY_EMBEDDING_MODEL }}" >> .env
        echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> .env
        echo "QDRANT_HOST=${{ secrets.QDRANT_HOST }}" >> .env
        echo "QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }}" >> .env
        echo "SSLCOMMERZ_STORE_ID=${{ secrets.SSLCOMMERZ_STORE_ID }}" >> .env
        echo "SSLCOMMERZ_STORE_PASSWORD=${{ secrets.SSLCOMMERZ_STORE_PASSWORD }}" >> .env
        echo "SSLCOMMERZ_SANDBOX=${{ secrets.SSLCOMMERZ_SANDBOX }}" >> .env
        echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
      
    - name: Create keys folder
      run: mkdir -p keys

    - name: Add firebaseKey.json to keys folder
      run: |
        echo '{
          "type": "service_account",
          "project_id": ${{ secrets.FIREBASE_PROJECT_ID }},
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": ${{ secrets.FIREBASE_PRIVATE_KEY }},
          "client_email": ${{ secrets.FIREBASE_CLIENT_EMAIL }},
          "client_id": ${{ secrets.FIREBASE_CLIENT_ID }},
          "auth_uri": ${{ secrets.FIREBASE_AUTH_URI }},
          "token_uri": ${{ secrets.FIREBASE_TOKEN_URI }},
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }},
          "universe_domain": ${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}
        }' > keys/firebaseKey.json
    
    - name: Create .env.test file
      run: |
        echo "FIREBASE_KEY_PATH=/app/keys/firebaseKey.json" >> .env.test
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test
        echo "E2E_BASE_URL=${{ secrets.E2E_BASE_URL }}" >> .env.test
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.test
        echo "FIREBASE_TEST_EMAIL=${{ secrets.FIREBASE_TEST_EMAIL }}" >> .env.test
        echo "FIREBASE_TEST_PASSWORD=${{ secrets.FIREBASE_TEST_PASSWORD }}" >> .env.test
        echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.test
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.test
        echo "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}" >> .env.test
        echo "QUERY_EMBEDDING_MODEL=${{ secrets.QUERY_EMBEDDING_MODEL }}" >> .env.test
        echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> .env.test
        echo "QDRANT_HOST=${{ secrets.QDRANT_HOST }}" >> .env.test
        echo "QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }}" >> .env.test
        echo "SSLCOMMERZ_STORE_ID=${{ secrets.SSLCOMMERZ_STORE_ID }}" >> .env.test
        echo "SSLCOMMERZ_STORE_PASSWORD=${{ secrets.SSLCOMMERZ_STORE_PASSWORD }}" >> .env.test
        echo "SSLCOMMERZ_SANDBOX=${{ secrets.SSLCOMMERZ_SANDBOX }}" >> .env.test
        echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env.test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Fix permissions for backend volume
      run: |
        chmod -R 777 .

    - name: Build and test with Docker Compose
      run: |
        docker compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from test

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: backend/coverage_reports/coverage.xml
    
    - name: Push Backend Image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: docker push studybuddyimagecontainer.azurecr.io/backend:latest


  frontend_pipeline:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests & Generate Coverage Report
        run: npm run coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports/lcov.info
      
      - name: Build Frontend Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: docker build -t studybuddyimagecontainer.azurecr.io/frontend:latest .
      
      - name: Push Frontend Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: docker push studybuddyimagecontainer.azurecr.io/frontend:latest

  sonarcloud-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [backend_pipeline, frontend_pipeline]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage_reports

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}