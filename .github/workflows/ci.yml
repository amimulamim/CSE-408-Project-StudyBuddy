name: CI pipeline

on:
  pull_request:
    branches:
      - main
    types: [reopened, synchronize, opened]
  push:
    branches:
      - main

jobs:
  backend_pipeline:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Create .env file
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
        echo "FIREBASE_KEY_PATH=/app/keys/firebaseKey.json" >> .env
      
    - name: Create keys folder
      run: mkdir -p keys

    - name: Add firebaseKey.json to keys folder
      run: |
        echo '{
          "type": "service_account",
          "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
          "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
          "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
          "auth_uri": "${{ secrets.FIREBASE_AUTH_URI }}",
          "token_uri": "${{ secrets.FIREBASE_TOKEN_URI }}",
          "auth_provider_x509_cert_url": "${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}",
          "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
          "universe_domain": "${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"
        }' > keys/firebaseKey.json
    
    - name: Add studybuddy-50d75-firebase-adminsdk-fbsvc-b8eaf38672.json to keys folder
      run: |
        echo '{
          "type": "service_account",
          "project_id": "${{ secrets.FIREBASE_PROJECT_ID }}",
          "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
          "private_key": "${{ secrets.FIREBASE_PRIVATE_KEY }}",
          "client_email": "${{ secrets.FIREBASE_CLIENT_EMAIL }}",
          "client_id": "${{ secrets.FIREBASE_CLIENT_ID }}",
          "auth_uri": "${{ secrets.FIREBASE_AUTH_URI }}",
          "token_uri": "${{ secrets.FIREBASE_TOKEN_URI }}",
          "auth_provider_x509_cert_url": "${{ secrets.FIREBASE_AUTH_PROVIDER_CERT_URL }}",
          "client_x509_cert_url": "${{ secrets.FIREBASE_CLIENT_CERT_URL }}",
          "universe_domain": "${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}"
        }' > keys/studybuddy-50d75-firebase-adminsdk-fbsvc-b8eaf38672.json
    
    - name: Create .env.test file
      run: |
        echo "FIREBASE_KEY_PATH=${{ secrets.FIREBASE_KEY_PATH }}" >> .env.test
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env.test
        echo "E2E_BASE_URL=${{ secrets.E2E_BASE_URL }}" >> .env.test
        echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.test
        echo "FIREBASE_TEST_EMAIL=${{ secrets.FIREBASE_TEST_EMAIL }}" >> .env.test
        echo "FIREBASE_TEST_PASSWORD=${{ secrets.FIREBASE_TEST_PASSWORD }}" >> .env.test


    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.11'

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt

    # - name: Run tests with coverage
    #   run: |
    #     cd ..
    #     coverage run -m pytest
    #     coverage xml

    # - name: Clean up .coverage if needed
    #   run: rm -f .coverage

    # - name: Upload coverage report artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: backend-coverage-report
    #     path: backend/coverage_reports/coverage.xml
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test with Docker Compose
      run: |
        docker compose -f docker-compose.test.yml up --build --abort-on-container-exit
      # env:
      #   FIREBASE_KEY_PATH: ${{ secrets.FIREBASE_KEY_PATH }}
      #   DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #   E2E_BASE_URL: ${{ secrets.E2E_BASE_URL }}
      #   FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
      #   FIREBASE_TEST_EMAIL: ${{ secrets.FIREBASE_TEST_EMAIL }}
      #   FIREBASE_TEST_PASSWORD: ${{ secrets.FIREBASE_TEST_PASSWORD }}

    # - name: Copy test coverage from container
    #   run: |
    #     docker cp $(docker ps -a -q --filter "name=backend-test" --format "{{.ID}}"):/app/coverage.xml backend/coverage_reports/coverage.xml

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: coverage_reports/coverage.xml


  frontend_pipeline:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm run test

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports/lcov.info

  sonarcloud-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [backend_pipeline, frontend_pipeline]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage_reports

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}