name: CI pipeline

on:
  pull_request:
    branches: [ main ]
    types: [ reopened, synchronize, opened ]
  push:
    branches: [ main ]

env:
  IMAGE_BACKEND: ${{ secrets.DOCKERHUB_USERNAME }}/studybuddy-backend
  IMAGE_FRONTEND: ${{ secrets.DOCKERHUB_USERNAME }}/studybuddy-frontend

jobs:
  backend_pipeline:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "${{ secrets.BACKEND_ENV }}" > .env

      - name: Create keys folder
        run: mkdir -p keys

      - name: Add firebaseKey.json to keys folder
        run: |
          echo '{
            "type": "service_account",
            "project_id": ${{ secrets.FIREBASE_PROJECT_ID }},
            "private_key_id": "${{ secrets.FIREBASE_PRIVATE_KEY_ID }}",
            "private_key": ${{ secrets.FIREBASE_PRIVATE_KEY }},
            "client_email": ${{ secrets.FIREBASE_CLIENT_EMAIL }},
            "client_id": ${{ secrets.FIREBASE_CLIENT_ID }},
            "auth_uri": ${{ secrets.FIREBASE_AUTH_URI }},
            "token_uri": ${{ secrets.FIREBASE_TOKEN_URI }},
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }},
            "universe_domain": ${{ secrets.FIREBASE_UNIVERSE_DOMAIN }}
          }' > keys/firebaseKey.json


      - name: Create .env.test file
        run: |
          echo "${{ secrets.BACKEND_ENV_TEST }}" > .env.test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Fix permissions for backend volume
        run: chmod -R 777 .

      - name: Build and test with Docker Compose
        run: |
          TAG=${{ github.sha }} docker compose \
            -f docker-compose.test.yml up \
            --build --abort-on-container-exit --exit-code-from test

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage_reports/coverage.xml

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:latest
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}

  frontend_pipeline:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Create .env file
        run: |
           echo "${{ secrets.FRONTEND_ENV }}" > .env

      - name: Run Unit Tests & Generate Coverage Report
        run: npm run coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports/lcov.info

      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push frontend image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
          tags: |
            ${{ env.IMAGE_FRONTEND }}:latest
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}

  sonarcloud-scan:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: [backend_pipeline, frontend_pipeline]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download backend coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-report
          path: backend/coverage_reports

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage-report
          path: frontend/coverage_reports

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

