paths:
  /api/content/generate:
    post:
      tags: [Content]
      summary: Request AI-generated educational content
      description: |
        User submits a content request by specifying content type, topic, and optional parameters.
        The backend uses RAG (retrieval-augmented generation) to generate and store personalized educational content.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [contentType, contentTopic]
              properties:
                contentType:
                  type: string
                  enum: [slides, flashcards, summary, quiz]
                  example: slides
                contentTopic:
                  type: string
                  example: "Photosynthesis"
                difficulty:
                  type: string
                  enum: [easy, medium, hard]
                  example: medium
                length:
                  type: string
                  enum: [short, medium, long]
                  example: medium
                tone:
                  type: string
                  enum: [formal, friendly, instructive]
                  example: instructive
      responses:
        '200':
          description: Content generated and stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  content:
                    type: string
                  metadata:
                    type: object
                    properties:
                      type: { type: string }
                      topic: { type: string }
                      createdAt: { type: string, format: date-time }
        '400':
          description: Invalid input parameters
        '403':
          description: User not authorized to generate content
        '500':
          description: Internal server error

  /api/content/{contentId}:
    get:
      tags: [Content]
      summary: Retrieve previously generated content by ID
      parameters:
        - in: path
          name: contentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  content:
                    type: string
                  metadata:
                    type: object
        '404':
          description: Content not found or access denied

  /api/content/user:
    get:
      tags: [Content]
      summary: Get all previously generated contents by user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user-generated contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        contentId:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized
  /api/content/raw/{contentId}:
    get:
      tags: [Content]
      summary: View raw content by ID
      parameters:
        - in: path
          name: contentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Raw content details
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  rawText:
                    type: string
                    description: The raw unprocessed content generated by the backend
                  metadata:
                    type: object
                    properties:
                      topic:
                        type: string
                      contentType:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '404':
          description: Content not found

  /api/content/raw/user:
    get:
      tags: [Content]
      summary: View all raw contents by user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all raw contents generated by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        contentId:
                          type: string
                        topic:
                          type: string
                        contentType:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized
