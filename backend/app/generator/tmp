 
    # def generate_questions(self, context: str, num_questions: int, question_type: str) -> Dict[str, Any]:
    #     """Generates exam questions based on context using Gemini API."""
    #     try:
    #         response = {
    #             "questions": []
    #         }
            
    #         for i in range(num_questions):
    #             if question_type.lower() == "multiple_choice":
    #                 prompt = (
    #                     f"Based on the following context, generate a multiple-choice question with exactly 4 options. "
    #                     f"Return the response in JSON format with fields: 'question', 'options' (list of 4 strings), and 'correct_answer' (string matching one option).\n\n"
    #                     f"Context: {context[:2000]}"  # Truncate context to avoid token limits
    #                 )
    #                 result = self.model.generate_content(prompt)
    #                 # Parse Gemini response (assuming JSON-like text)
    #                 try:
    #                     import json
    #                     question_data = json.loads(result.text.strip('```json\n').strip('```'))
    #                     question_data = {
    #                         "type": "multiple_choice",
    #                         "question": question_data.get("question", f"Question {i+1}"),
    #                         "options": [
    #                             f"A. {question_data['options'][0]}",
    #                             f"B. {question_data['options'][1]}",
    #                             f"C. {question_data['options'][2]}",
    #                             f"D. {question_data['options'][3]}"
    #                         ],
    #                         "correct_answer": f"A. {question_data['correct_answer']}"
    #                     }
    #                 except Exception as e:
    #                     logger.warning(f"Failed to parse Gemini response: {str(e)}. Using fallback.")
    #                     question_data = {
    #                         "type": "multiple_choice",
    #                         "question": f"Question {i+1} based on context",
    #                         "options": ["A. banana", "B. orange", "C. apple", "D. grape"],
    #                         "correct_answer": "A. banana"
    #                     }
    #             elif question_type.lower() == "true_false":
    #                 prompt = (
    #                     f"Based on the following context, generate a true/false question. "
    #                     f"Return the response in JSON format with fields: 'question' (string) and 'correct_answer' (boolean).\n\n"
    #                     f"Context: {context[:2000]}"
    #                 )
    #                 result = self.model.generate_content(prompt)
    #                 try:
    #                     import json
    #                     question_data_raw = json.loads(result.text.strip('```json\n').strip('```'))
    #                     question_data = {
    #                         "type": "true_false",
    #                         "question": question_data_raw.get("question", f"Question {i+1}"),
    #                         "correct_answer": question_data_raw.get("correct_answer", True)
    #                     }
    #                 except Exception as e:
    #                     logger.warning(f"Failed to parse Gemini response: {str(e)}. Using fallback.")
    #                     question_data = {
    #                         "type": "true_false",
    #                         "question": f"Question {i+1} based on context",
    #                         "correct_answer": True
    #                     }
    #             else:  # short_answer
    #                 prompt = (
    #                     f"Based on the following context, generate a short-answer question. "
    #                     f"Return the response in JSON format with fields: 'question' (string) and 'correct_answer' (string).\n\n"
    #                     f"Context: {context[:2000]}"
    #                 )
    #                 result = self.model.generate_content(prompt)
    #                 try:
    #                     import json
    #                     question_data_raw = json.loads(result.text.strip('```json\n').strip('```'))
    #                     question_data = {
    #                         "type": "short_answer",
    #                         "question": question_data_raw.get("question", f"Question {i+1}"),
    #                         "correct_answer": question_data_raw.get("correct_answer", "Sample answer")
    #                     }
    #                 except Exception as e:
    #                     logger.warning(f"Failed to parse Gemini response: {str(e)}. Using fallback.")
    #                     question_data = {
    #                         "type": "short_answer",
    #                         "question": f"Question {i+1} based on context",
    #                         "correct_answer": "Sample answer"
    #                     }
    #             response["questions"].append(question_data)
            
    #         return response
    #     except Exception as e:
    #         logger.error(f"Error generating questions: {str(e)}")
    #         raise Exception(f"Error generating questions: {str(e)}")
      