openapi: 3.0.3
info:
  title: StudyBuddy API
  version: 1.0.0
  description: API docs for StudyBuddy modules
servers:
- url: http://localhost:8000
tags:
- name: Auth
- name: Chat
- name: Billing
  description: Subscription and payment management
- name: Quiz
  description: Quiz management and operations,Question retrieval , submission and
    evaluation
- name: ResourceProcessing
  description: Document processing ,parsing and vectorization
- name: Content
  description: Content generation and management, including slides, flashcards,pdf
- name: Profile
  description: Endpoints for viewing and editing user profiles.
- name: Progress
  description: Endpoints for tracking learning progress.
- name: Analytics
  description: Endpoints for tracking time spent.
paths:
  /api/content/generate:
    post:
      tags:
      - Content
      summary: Request AI-generated educational content
      description: 'User submits a content request by specifying content type, topic,
        and optional parameters.

        The backend uses RAG (retrieval-augmented generation) to generate and store
        personalized educational content.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - contentType
              - contentTopic
              properties:
                contentType:
                  type: string
                  enum:
                  - slides
                  - flashcards
                  - summary
                  - quiz
                  example: slides
                contentTopic:
                  type: string
                  example: Photosynthesis
                difficulty:
                  type: string
                  enum:
                  - easy
                  - medium
                  - hard
                  example: medium
                length:
                  type: string
                  enum:
                  - short
                  - medium
                  - long
                  example: medium
                tone:
                  type: string
                  enum:
                  - formal
                  - friendly
                  - instructive
                  example: instructive
      responses:
        '200':
          description: Content generated and stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  content:
                    type: string
                  metadata:
                    type: object
                    properties:
                      type:
                        type: string
                      topic:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Invalid input parameters
        '403':
          description: User not authorized to generate content
        '500':
          description: Internal server error
  /api/content/{contentId}:
    get:
      tags:
      - Content
      summary: Retrieve previously generated content by ID
      parameters:
      - in: path
        name: contentId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Content fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  content:
                    type: string
                  metadata:
                    type: object
        '404':
          description: Content not found or access denied
  /api/content/user:
    get:
      tags:
      - Content
      summary: Get all previously generated contents by user
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of user-generated contents
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        contentId:
                          type: string
                        topic:
                          type: string
                        type:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized
  /api/content/raw/{contentId}:
    get:
      tags:
      - Content
      summary: View raw content by ID
      parameters:
      - in: path
        name: contentId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Raw content details
          content:
            application/json:
              schema:
                type: object
                properties:
                  contentId:
                    type: string
                  rawText:
                    type: string
                    description: The raw unprocessed content generated by the backend
                  metadata:
                    type: object
                    properties:
                      topic:
                        type: string
                      contentType:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '404':
          description: Content not found
  /api/content/raw/user:
    get:
      tags:
      - Content
      summary: View all raw contents by user
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of all raw contents generated by the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  contents:
                    type: array
                    items:
                      type: object
                      properties:
                        contentId:
                          type: string
                        topic:
                          type: string
                        contentType:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        '401':
          description: Unauthorized
  /resource/upload:
    post:
      tags:
      - ResourceProcessing
      summary: Upload a resource document (PDF)
      description: 'Uploads a PDF document. System automatically parses text, images,
        tables,

        chunks the text, vectorizes the content, and stores embeddings internally.

        '
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: PDF document file to upload
      responses:
        '200':
          description: Upload and processing completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentId:
                    type: string
                  processingStatus:
                    type: string
                    example: Completed
                  summary:
                    type: object
                    properties:
                      textExtracted:
                        type: boolean
                      imagesExtracted:
                        type: boolean
                      tablesExtracted:
                        type: boolean
        '400':
          description: Upload failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /billing/subscribe:
    post:
      tags:
      - Billing
      summary: Create a checkout session to subscribe to a premium plan
      description: 'Redirects the user to the payment provider (e.g., SSLCommerz)
        to complete the checkout.

        Handles missing fields, unsupported plans, or subscription conflicts.

        '
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - planId
              - successUrl
              - cancelUrl
              properties:
                planId:
                  type: string
                  example: premium_monthly
                successUrl:
                  type: string
                  description: URL to redirect after successful payment
                cancelUrl:
                  type: string
                  description: URL to redirect if user cancels
      responses:
        '200':
          description: Checkout session created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkoutUrl:
                    type: string
                    description: URL to payment gateway checkout page
        '400':
          description: Invalid input (missing planId, invalid URLs)
        '409':
          description: Conflict (already has active subscription)
        '500':
          description: Internal server error while creating checkout
  /billing/status:
    get:
      tags:
      - Billing
      summary: Get the current user's subscription status
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Subscription status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionStatus'
        '404':
          description: No subscription found
        '401':
          description: Unauthorized
  /billing/cancel:
    post:
      tags:
      - Billing
      summary: Cancel the current user's subscription
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Subscription canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Subscription canceled.
        '404':
          description: No active subscription to cancel
        '500':
          description: Error canceling subscription
  /billing/webhook:
    post:
      tags:
      - Billing
      summary: Handle incoming payment provider webhooks
      description: 'Receives and processes events from SSLCommerz (e.g., invoice paid,
        subscription canceled).

        **Must validate webhook signature.**

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook payload or signature
        '500':
          description: Error processing webhook
  /api/quiz/request:
    post:
      tags:
      - Quiz
      summary: Request a customized quiz
      description: Request a quiz with subject, topic, marks, time, and difficulty.
        Missing values default to recommended.
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - subject
              - topic
              - marks
              - time
              properties:
                subject:
                  type: string
                topic:
                  type: string
                marks:
                  type: integer
                time:
                  type: integer
                  description: Total duration (minutes)
                difficulty:
                  type: string
                  enum:
                  - Easy
                  - Medium
                  - Hard
      responses:
        '200':
          description: Quiz request accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizId:
                    type: string
                  status:
                    type: string
                    example: Submitted
        '400':
          description: Invalid or incomplete parameters
        '401':
          description: Unauthorized
  /api/quiz/{quizId}:
    get:
      tags:
      - Quiz
      summary: Fetch quiz questions
      description: Retrieve generated questions for the requested quiz session
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: quizId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Quiz fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizId:
                    type: string
                  subject:
                    type: string
                  topic:
                    type: string
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuizQuestion'
        '404':
          description: Quiz not found
        '401':
          description: Unauthorized
  /api/quiz/{quizId}/submit:
    post:
      tags:
      - Quiz
      summary: Submit quiz answers
      description: Student submits answers before or at timeout.
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: quizId
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - answers
              properties:
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      questionId:
                        type: string
                      selectedOptions:
                        type: array
                        items:
                          type: string
      responses:
        '200':
          description: Submission successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Submitted
        '400':
          description: Invalid answers
        '401':
          description: Unauthorized
        '404':
          description: Quiz not found
  /api/quiz/{quizId}/result:
    get:
      tags:
      - Quiz
      summary: Get quiz results and feedback
      description: View score, correct/incorrect answers, hints and dashboard analytics.
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: quizId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Result summary returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                  total:
                    type: number
                  correctAnswers:
                    type: array
                    items:
                      type: string
                  incorrectAnswers:
                    type: array
                    items:
                      type: string
                  explanations:
                    type: array
                    items:
                      type: object
                      properties:
                        questionId:
                          type: string
                        explanation:
                          type: string
                        hint:
                          type: string
                  analytics:
                    type: object
                    properties:
                      strengthTopics:
                        type: array
                        items:
                          type: string
                      weakTopics:
                        type: array
                        items:
                          type: string
                      timeTaken:
                        type: string
                        example: 17 minutes
        '401':
          description: Unauthorized
        '404':
          description: Result not found
  /profile/minimal:
    get:
      tags:
      - Profile
      summary: View Minimal Profile
      description: Returns username, photo URL, and current plan.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched minimal profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  photoUrl:
                    type: string
                  currentPlan:
                    type: string
  /profile/detail:
    get:
      tags:
      - Profile
      summary: View Detailed Profile
      description: Returns detailed user profile.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Successfully fetched detailed profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  photoUrl:
                    type: string
                  currentPlan:
                    type: string
                  location:
                    type: string
                  occupation:
                    type: string
                  institution:
                    type: string
                  studyDomain:
                    type: string
                  interests:
                    type: array
                    items:
                      type: string
  /profile/edit:
    put:
      tags:
      - Profile
      summary: Edit Profile
      description: Update any fields from the detailed profile.
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                username:
                  type: string
                photoUrl:
                  type: string
                currentPlan:
                  type: string
                location:
                  type: string
                occupation:
                  type: string
                institution:
                  type: string
                studyDomain:
                  type: string
                interests:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Profile updated successfully
  /progress:
    get:
      tags:
      - Progress
      summary: View Progress
      description: Fetch user's quiz results using pagination.
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: offset
        schema:
          type: integer
        required: true
      - in: query
        name: size
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: List of quiz results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizResult'
  /contents/generated:
    get:
      tags:
      - Content
      summary: Get Generated Contents
      description: Fetch AI-generated contents with pagination.
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: offset
        schema:
          type: integer
        required: true
      - in: query
        name: size
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: List of generated contents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentItem'
  /stats/spent-time:
    get:
      tags:
      - Analytics
      summary: View Time Spent
      description: Returns time spent by the user within the given time range.
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: start
        schema:
          type: string
          format: date-time
        required: true
      - in: query
        name: end
        schema:
          type: string
          format: date-time
        required: true
      responses:
        '200':
          description: Time spent data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    timeSpent:
                      type: number
                      format: float
                      description: Time spent in hours
  /ai/chat:
    post:
      tags:
      - Chat
      summary: Start or continue a chat with AI
      description: 'Starts a new chat session if `chatId` is not provided.

        If `chatId` is provided, the message is added to the existing session.

        '
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: User's message text
                files:
                  type: array
                  items:
                    type: string
                  format: binary
                  description: Optional field (files) for uploading files
                chatId:
                  type: string
                  description: Optional chat session ID
      responses:
        '200':
          description: AI responded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chatId:
                    type: string
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input (e.g., no message, multiple files, file too large)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized (missing or invalid token)
        '413':
          description: Payload too large (file size exceeded)
  /ai/chat/list:
    get:
      tags:
      - Chat
      summary: Get list of all chat sessions for the user
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of chat sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        name:
                          type: string
        '401':
          description: Unauthorized
  /ai/chat/{chatId}:
    get:
      tags:
      - Chat
      summary: Retrieve a specific chat session by ID
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Chat session details
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized
        '404':
          description: Chat not found
    delete:
      tags:
      - Chat
      summary: Delete a specific chat session
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Chat session deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  chatId:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Chat not found
  /ai/chat/{chatId}/rename:
    patch:
      tags:
      - Chat
      summary: Rename an existing chat session
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: chatId
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - name
              properties:
                name:
                  type: string
                  description: New chat name
      responses:
        '200':
          description: Chat renamed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
        '400':
          description: Invalid request (e.g., empty name)
        '401':
          description: Unauthorized
        '404':
          description: Chat not found
  /api/auth/signup:
    post:
      tags:
      - Auth
      summary: Sign up using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid input (missing fields, weak password)
  /api/auth/login:
    post:
      tags:
      - Auth
      summary: Log in using email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - email
              - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthorized (invalid credentials)
  /api/auth/google:
    post:
      tags:
      - Auth
      summary: Google Sign-in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - idToken
              properties:
                idToken:
                  type: string
                  description: Firebase ID token from Google
      responses:
        '200':
          description: Google login/signup handled successfully
        '401':
          description: Invalid or expired Google token
  /api/auth/logout:
    post:
      tags:
      - Auth
      summary: Log out the current user
      description: 'Logs the user out by invalidating session or clearing refresh
        tokens.

        In stateless auth systems (like Firebase), logout is handled on client side.

        '
      security:
      - bearerAuth: []
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully.
        '401':
          description: Unauthorized (invalid or missing token)
  /api/auth/user-info:
    get:
      tags:
      - Auth
      summary: Get current authenticated user's info
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Fetched user profile successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized (token missing or invalid)
    patch:
      tags:
      - Auth
      summary: Update authenticated user's profile info
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name of the user
                bio:
                  type: string
                  description: Short bio or description
                institution:
                  type: string
                  description: Institution or organization name
                role:
                  type: string
                  description: User's role (e.g., student, teacher,developer)
                photo:
                  type: string
                  format: binary
                  description: Upload a new profile photo (optional)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated successfully.
                  photoUrl:
                    type: string
                    description: New photo URL if uploaded
        '400':
          description: Invalid input (validation error or file type issue)
        '401':
          description: Unauthorized
components:
  schemas:
    Message:
      type: object
      properties:
        role:
          type: string
        text:
          type: string
        files:
          type: array
          items:
            type: string
        status:
          type: string
        timestamp:
          type: string
          format: date-time
    SubscriptionStatus:
      type: object
      properties:
        plan:
          type: string
          enum:
          - free
          - premium
        active:
          type: boolean
        expiresAt:
          type: string
          format: date-time
    ResourceProcessingSummary:
      type: object
      properties:
        textExtracted:
          type: boolean
        imagesExtracted:
          type: boolean
        tablesExtracted:
          type: boolean
    QuizQuestion:
      type: object
      required:
      - questionId
      - questionText
      - options
      properties:
        questionId:
          type: string
        questionText:
          type: string
        options:
          type: array
          items:
            type: string
        type:
          type: string
          enum:
          - Theoretical
          - ProblemSolving
        difficulty:
          type: string
          enum:
          - Easy
          - Medium
          - Hard
        marks:
          type: integer
        hints:
          type: array
          items:
            type: string
        explanation:
          type: string
    ContentItem:
      type: object
      properties:
        contentId:
          type: string
        content:
          type: string
        imagePreview:
          type: string
        metadata:
          type: object
          properties:
            topic:
              type: string
            contentType:
              type: string
            createdAt:
              type: string
              format: date-time
    UserInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        bio:
          type: string
        institution:
          type: string
        role:
          type: string
          description: e.g., student, teacher, developer
        photoUrl:
          type: string
          description: URL of uploaded or Google profile photo
        authProvider:
          type: string
          description: Authentication method (email/password, google)
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid planId
    QuizResult:
      type: object
      properties:
        score:
          type: number
        total:
          type: number
        feedback:
          type: string
        topic:
          type: string
        quizId:
          type: string
        date:
          type: string
          format: date-time
        domain:
          type: string
          description: The domain of the quiz (e.g., physics, chemistry)
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
